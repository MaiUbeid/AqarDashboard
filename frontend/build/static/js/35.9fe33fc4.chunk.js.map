{"version":3,"sources":["app/views/sessions/Signup.jsx"],"names":["Signup","state","email","username","password","repassword","handleSubmit","values","setSubmitting","className","style","backgroundImage","initialValues","this","validationSchema","SignupSchema","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","htmlFor","name","type","onChange","onBlur","value","Component","yup","shape","required","min","oneOf","connect","user"],"mappings":"iNAOMA,E,4MACJC,MAAQ,CACNC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,WAAY,I,EAGdC,aAAe,SAACC,EAAD,GAA+B,EAApBC,e,4CAI1B,WACE,OACE,yBACEC,UAAU,mBACVC,MAAO,CACLC,gBAAiB,0GAGnB,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OAEb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,gBAAd,WACA,kBAAC,IAAD,CACEG,cAAeC,KAAKZ,MACpBa,iBAAkBC,EAClBC,SAAUH,KAAKP,eAEd,gBACCC,EADD,EACCA,OACAU,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAd,EAND,EAMCA,aAND,EAOCe,aAPD,OASC,0BAAML,SAAUV,GACd,yBAAKG,UAAU,cACb,2BAAOa,QAAQ,YAAf,aACA,2BACEb,UAAU,oCACVc,KAAK,WACLC,KAAK,OACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOpB,EAAOJ,WAEfc,EAAOd,UAAYe,EAAQf,UAC1B,yBAAKM,UAAU,yBACZQ,EAAOd,WAId,yBAAKM,UAAU,cACb,2BAAOa,QAAQ,SAAf,iBACA,2BACEC,KAAK,QACLd,UAAU,oCACVe,KAAK,QACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOpB,EAAOL,QAEfe,EAAOf,OAASgB,EAAQhB,OACvB,yBAAKO,UAAU,yBACZQ,EAAOf,QAId,yBAAKO,UAAU,cACb,2BAAOa,QAAQ,YAAf,YACA,2BACEC,KAAK,WACLd,UAAU,oCACVe,KAAK,WACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOpB,EAAOH,WAEfa,EAAOb,UAAYc,EAAQd,UAC1B,yBAAKK,UAAU,yBACZQ,EAAOb,WAId,yBAAKK,UAAU,cACb,2BAAOa,QAAQ,cAAf,mBACA,2BACEC,KAAK,aACLd,UAAU,oCACVe,KAAK,WACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOpB,EAAOF,aAEfY,EAAOZ,YAAca,EAAQb,YAC5B,yBAAKI,UAAU,yBACZQ,EAAOZ,aAId,4BACEI,UAAU,6CACVe,KAAK,UAFP,yB,GA1GHI,aA6Hfb,EAAec,MAAaC,MAAM,CACtC3B,SAAU0B,MAAaE,SAAS,qBAChC7B,MAAO2B,MAEJ3B,MAAM,iBACN6B,SAAS,qBACZ3B,SAAUyB,MAEPG,IAAI,EAAG,qCACPD,SAAS,wBACZ1B,WAAYwB,MAETE,SAAS,mBACTE,MAAM,CAACJ,IAAQ,aAAc,0BAOnBK,uBAJS,SAAAjC,GAAK,MAAK,CAChCkC,KAAMlC,EAAMkC,QAG0B,GAAzBD,CAA6BlC","file":"static/js/35.9fe33fc4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Signup extends Component {\r\n  state = {\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    repassword: \"\"\r\n  };\r\n\r\n  handleSubmit = (values, { setSubmitting }) => {\r\n    // console.log(values);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"auth-layout-wrap\"\r\n        style={{\r\n          backgroundImage: \"linear-gradient(0deg, rgb(195 148 243), rgb(245 245 245 / 30%)), url(/assets/images/photo-wide-4.jpg)\"\r\n        }}\r\n      >\r\n        <div className=\"auth-content\">\r\n          <div className=\"card o-hidden\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col-md-12\">\r\n                <div className=\"p-4\">\r\n                  <h1 className=\"mb-3 text-18\">Sign Up</h1>\r\n                  <Formik\r\n                    initialValues={this.state}\r\n                    validationSchema={SignupSchema}\r\n                    onSubmit={this.handleSubmit}\r\n                  >\r\n                    {({\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting\r\n                    }) => (\r\n                      <form onSubmit={handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"username\">Your name</label>\r\n                          <input\r\n                            className=\"form-control form-control-rounded\"\r\n                            name=\"username\"\r\n                            type=\"text\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.username}\r\n                          />\r\n                          {errors.username && touched.username && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.username}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"email\">Email address</label>\r\n                          <input\r\n                            name=\"email\"\r\n                            className=\"form-control form-control-rounded\"\r\n                            type=\"email\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.email}\r\n                          />\r\n                          {errors.email && touched.email && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.email}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"password\">Password</label>\r\n                          <input\r\n                            name=\"password\"\r\n                            className=\"form-control form-control-rounded\"\r\n                            type=\"password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.password}\r\n                          />\r\n                          {errors.password && touched.password && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.password}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"repassword\">Retype password</label>\r\n                          <input\r\n                            name=\"repassword\"\r\n                            className=\"form-control form-control-rounded\"\r\n                            type=\"password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.repassword}\r\n                          />\r\n                          {errors.repassword && touched.repassword && (\r\n                            <div className=\"text-danger mt-1 ml-2\">\r\n                              {errors.repassword}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <button\r\n                          className=\"btn btn-primary btn-block btn-rounded mt-3\"\r\n                          type=\"submit\"\r\n                        >\r\n                          Sign Up\r\n                        </button>\r\n                      </form>\r\n                    )}\r\n                  </Formik>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst SignupSchema = yup.object().shape({\r\n  username: yup.string().required(\"email is required\"),\r\n  email: yup\r\n    .string()\r\n    .email(\"Invalid email\")\r\n    .required(\"email is required\"),\r\n  password: yup\r\n    .string()\r\n    .min(8, \"Password must be 8 character long\")\r\n    .required(\"password is required\"),\r\n  repassword: yup\r\n    .string()\r\n    .required(\"repeat password\")\r\n    .oneOf([yup.ref(\"password\")], \"Passwords must match\")\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  user: state.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Signup);\r\n"],"sourceRoot":""}