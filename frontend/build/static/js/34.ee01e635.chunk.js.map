{"version":3,"sources":["app/views/common/TextError.jsx","app/views/common/Input.jsx","app/views/common/InputGroup.jsx","app/views/common/Select.jsx","app/views/common/RadioButtons.jsx","app/views/common/CheckboxGroup.jsx","app/views/common/Checkbox.jsx","app/views/common/SwitchButton.jsx","app/views/common/DatePicker.jsx","app/views/common/SubmitButton.jsx","app/views/common/FileUpload.jsx","app/views/common/FormikControl.jsx","app/services/userService.js","app/views/sessions/Signin.jsx"],"names":["TextError","props","className","children","Input","label","name","rest","type","width","htmlFor","id","component","InputGroup","hideIcon","onRemove","onClick","Select","options","addDefaultItem","as","map","option","key","value","text","RadioButtons","onChange","form","field","setFieldValue","Fragment","checked","val","target","CheckboxGroup","includes","Checkbox","SwitchButton","DatePicker","format","dateFormat","autoComplete","selected","Submitbutton","initialLabel","loadingLabel","isSpinnerDisplayed","disabled","style","verticalAlign","FileUpload","onFileChange","multiple","useState","imageUrl","imageurl","setImageUrl","isSpinning","setSpinner","useEffect","src","alt","event","files","reader","FileReader","onload","readyState","result","readAsDataURL","handleFile","FormikControl","control","Signin","yup","shape","email","required","password","min","state","username","showLoadingSpinner","handleSubmit","values","a","setSubmitting","setState","jwtAuthService","loginWithEmailAndPassword","ex","document","title","dir","backgroundImage","initialValues","this","validationSchema","onSubmit","validateOnChange","enableReinitialize","fromikProps","placeholder","Component"],"mappings":"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","file":"static/js/34.ee01e635.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport function TextError(props) {\r\n  return (\r\n    <div className=\"invalid-field\">\r\n      <div className=\"invalid-feedback\">{props.children}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nexport default function Input(props) {\r\n  const { label, name, ...rest } = props;\r\n  let { type, width } = props;\r\n  if (!type) type = \"text\";\r\n  if (!width) width = \"12\";\r\n  return (\r\n    <div className={`form-group col-md-${width}`}>\r\n      <label htmlFor={name}>{label}</label>\r\n      <Field id={name} name={name} type={type} className=\"form-control\" {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nexport default function InputGroup(props) {\r\n  const { label, name, hideIcon, onRemove, ...rest } = props;\r\n  let { type, width } = props;\r\n  if (!type) type = \"text\";\r\n  if (!width) width = \"12\";\r\n  return (\r\n    <div className={`form-group`}>\r\n      <div className=\"input-group\">\r\n        <label htmlFor={name}>{label}</label>\r\n        <Field id={name} name={name} type={type} className=\"form-control\" {...rest} />\r\n        <div className=\"input-group-append\">\r\n        {hideIcon && (\r\n          <button className=\"btn btn-danger\" type=\"button\" onClick={() => props.onRemove()}><i className=\"i-Close\"></i>\r\n          </button>\r\n        )}\r\n        </div>\r\n        <ErrorMessage name={name} component={TextError} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction Select(props) {\r\n  let { label, name, options, addDefaultItem, width, ...rest } = props;\r\n  if (!width) {\r\n    width = \"6\";\r\n  }\r\n  return (\r\n    <div className={`form-group col-md-${width}`}>\r\n      <label htmlFor={name}>{label}</label>\r\n      <Field as=\"select\" id={name} name={name} {...rest} className=\"form-control\">\r\n        {options.map((option) => {\r\n          return (\r\n            <option key={option.value} value={option.value}>\r\n              {option.text}\r\n            </option>\r\n          );\r\n        })}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction RadioButtons(props) {\r\n  const { label, name, options, onChange, ...rest } = props;\r\n  return (\r\n    <div className=\"form-control\">\r\n      <label>{label}</label>\r\n      <Field name={name}>\r\n        {({ form, field }) => {\r\n          const { setFieldValue } = form;\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <input\r\n                  type=\"radio\"\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={field.value === option.value}\r\n                  onChange={(val) => {\r\n                    // console.log(\"val\", val.target.value);\r\n                    setFieldValue(name, val.target.value);\r\n                    if (onChange) onChange(val.target.value);\r\n                  }}\r\n                />\r\n                <label htmlFor={option.value}>{option.text}</label>\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RadioButtons;\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction CheckboxGroup(props) {\r\n  const { label, name, options, ...rest } = props;\r\n  return (\r\n    <div className=\"form-control\">\r\n      <label>{label}</label>\r\n      <Field name={name}>\r\n        {({ field }) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <React.Fragment key={option.text}>\r\n                <input type=\"checkbox\" id={option.value} {...field} {...rest} value={option.value} checked={field.value.includes(option.value)} />\r\n                <label htmlFor={option.value}>{option.text}</label>\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckboxGroup;\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction Checkbox(props) {\r\n  let { label, name, value, width, ...rest } = props;\r\n  if (!width) width = \"4\";\r\n  return (\r\n    <div className={`card-body col-md-${width} form-group mb-3`}>\r\n      <label className=\"checkbox checkbox-outline-primary\">\r\n        <span>{label}</span>\r\n        <Field name={name}>\r\n          {({ field }) => {\r\n            return (\r\n              <React.Fragment>\r\n                <input type=\"checkbox\" id={name} {...field} {...rest} value={value} checked={field.value} />\r\n              </React.Fragment>\r\n            );\r\n          }}\r\n        </Field>\r\n        <span className=\"checkmark\"></span>\r\n      </label>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Checkbox;\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nfunction SwitchButton(props) {\r\n  let { label, name, value, width, checked, ...rest } = props;\r\n  if (!width) width = \"4\";\r\n  return (\r\n    <div className={`card-body col-md-${width} form-group mb-3`}>\r\n      <label className=\"switch pr-5 switch-primary mr-3\">\r\n        <span>{label}</span>\r\n        <Field name={name}>\r\n          {({ field }) => {\r\n            return (\r\n              <React.Fragment>\r\n                <input type=\"checkbox\" id={name} {...field} {...rest} value={value} checked={checked} />\r\n              </React.Fragment>\r\n            );\r\n          }}\r\n        </Field>{\" \"}\r\n        <span className=\"slider\"></span>{\" \"}\r\n      </label>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SwitchButton;\r\n","import React from \"react\";\r\nimport DateView from \"react-datepicker\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction DatePicker(props) {\r\n  const { label, name, ...rest } = props;\r\n  let { width, format } = props;\r\n  if (!width) width = \"4\";\r\n  if (!format) format = \"dd-MMM-yyyy\";\r\n  return (\r\n    <div className={`form-group col-md-${width}`}>\r\n      <label htmlFor={name}>{label}</label>\r\n        <Field name={name} className=\"form-control\">\r\n          {({ form, field }) => {\r\n            const { setFieldValue } = form;\r\n            const { value } = field;\r\n            return <DateView dateFormat={format} autoComplete=\"off\" id={name} {...field} {...rest} selected={value} onChange={(val) => setFieldValue(name, val)} className=\"form-control\" />;\r\n          }}\r\n        </Field>\r\n      \r\n      <ErrorMessage component={TextError} name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DatePicker;\r\n","import React from \"react\";\r\n\r\nexport default function Submitbutton({ initialLabel, loadingLabel, isSpinnerDisplayed = false,...rest }) {\r\n  return (\r\n    <button type=\"submit\" className=\"btn btn-primary col-12\" disabled={isSpinnerDisplayed ? \"disabled\" : \"\"} {...rest}>\r\n      {!isSpinnerDisplayed && initialLabel}\r\n      {isSpinnerDisplayed && (\r\n        <React.Fragment>\r\n          <span> {loadingLabel}....</span>\r\n          <span className=\"spinner-glow spinner-glow-light ml-2\" style={{ verticalAlign: \"middle\" }}></span>\r\n        </React.Fragment>\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport TextError from \"./TextError\";\r\n\r\nexport default function FileUpload(props) {\r\n  const { name, onFileChange, setFieldValue, ...rest } = props;\r\n  let { label, width, multiple } = props;\r\n  if (!width) width = \"6\";\r\n  if (!label) label = \"اختر ملف\";\r\n  if (!multiple) multiple = false;\r\n  else multiple = multiple;\r\n\r\n  const [imageurl, setImageUrl] = useState(props.imageUrl ? props.imageUrl : \"/assets/images/placeholder.png\");\r\n  const [isSpinning, setSpinner] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (props.imageUrl) {\r\n      setImageUrl(props.imageUrl);\r\n    }\r\n    setSpinner(false);\r\n  }, [props.imageurl]);\r\n\r\n  const handleFile = (event) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      if (reader.readyState === 2) {\r\n        setImageUrl(reader.result);\r\n        setSpinner(false);\r\n      }\r\n    }\r\n    reader.readAsDataURL(event.target.files[0]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"item-card-image\">\r\n      <img className=\"card-img\" src={imageurl}\r\n        alt={label} />\r\n      <div className=\"card-img-overlay\">\r\n        <div className=\"upload-image\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"custom-file-input\"\r\n            id={name}\r\n            name={name}\r\n            {...rest}\r\n            onChange={(event) => {\r\n              setSpinner(true);\r\n              setFieldValue({ name }, multiple ? event.target.files : event.target.files[0]);\r\n              onFileChange(event);\r\n              handleFile(event);\r\n            }}\r\n          />\r\n          <label htmlFor={name} className=\"custom-file-label\">\r\n            <i className=\"i-Edit mr-2\"></i> {label === \"oldFileUploaded\" ? \"تعديل الملف\" : label}\r\n          </label>\r\n          {isSpinning && (<div className=\"spinner spinner-primary mr-3 update-image-spinner\"></div>)}\r\n          <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Input from \"./Input\";\r\nimport InputGroup from \"./InputGroup\";\r\nimport Select from \"./Select\";\r\nimport RadioButtons from \"./RadioButtons\";\r\nimport CheckboxGroup from \"./CheckboxGroup\";\r\nimport Checkbox from \"./Checkbox\";\r\nimport SwitchButton from \"./SwitchButton\";\r\nimport DatePicker from \"./DatePicker\";\r\nimport Submitbutton from \"./SubmitButton\";\r\nimport FileUpload from \"./FileUpload\";\r\nexport default function FormikControl({ control, ...rest }) {\r\n  switch (control) {\r\n    case \"input\":\r\n      return <Input {...rest}></Input>;\r\n    case \"InputGroup\":\r\n      return <InputGroup {...rest}></InputGroup>;\r\n    case \"select\":\r\n      return <Select {...rest}></Select>;\r\n    case \"checkbox\":\r\n      return <Checkbox {...rest} />;\r\n    case \"switchButton\":\r\n      return <SwitchButton {...rest} />;\r\n    case \"submitButton\":\r\n      return <Submitbutton {...rest} />;\r\n    case \"date\":\r\n      return <DatePicker {...rest} />;\r\n    case \"radio\":\r\n      return <RadioButtons {...rest} />;\r\n    case \"checkboxGroup\":\r\n      return <CheckboxGroup {...rest} />;\r\n      case \"file\":\r\n      return <FileUpload {...rest} />;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n","import http from \"./../../http-common\";\nlet controllerName = \"\";\n\n\n// \nfunction login(user) {\n  return http.post(`login`, user);\n}\n\n\n//////////////////////// \nfunction checkUserName(user) {\n  return http.post(`${controllerName}/check-userName`, user);\n}\n\nfunction sendConfirmationCode(data) {\n  return http.post(`${controllerName}/send-confirmation-code`, data);\n}\n\nfunction getProfileInfo() {\n  return http.get(`${controllerName}/get-profile-info`);\n}\n\nfunction register(user, confirmationCode) {\n  return http.post(`${controllerName}/register?confirmationCode=${confirmationCode}`, user);\n}\n\n\n\nfunction confirmCode(data) {\n  return http.post(`${controllerName}/confirm-code`, data);\n}\n\nfunction updateProfile(data) {\n  return http.post(`${controllerName}/update-profile`, data);\n}\n\nconst uploadImage = (data) => {\n  return http.post(`${controllerName}/upload-image`, data);\n};\n\nfunction changeUserName(user, confirmationCode) {\n  return http.post(`${controllerName}/change-username?confirmationCode=${confirmationCode}`, user);\n}\n\nfunction changePassword(model) {\n  return http.post(`${controllerName}/change-password`, model);\n}\nfunction forgotPassword(model) {\n  return http.post(`${controllerName}/forgot-password`, model);\n}\nfunction resetPassword(model) {\n  return http.post(`${controllerName}/reset-password`, model);\n}\n// function delayLoading(ms = 2000) {\n//   return http.get(\"/test/delayloading?ms=\" + ms);\n// }\n\nexport default {\n  register,\n  login,\n  confirmCode,\n  checkUserName,\n  sendConfirmationCode,\n  getProfileInfo,\n  updateProfile,\n  uploadImage,\n  changeUserName,\n  changePassword,\n  forgotPassword,\n  resetPassword,\n};\n","import React, { Component } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { loginWithEmailAndPassword } from \"app/redux/actions/LoginActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport FormikControl from \"../common/FormikControl\";\r\nimport userService from \"../../services/userService\";\r\nimport jwtAuthService from \"../../services/jwtAuthService\";\r\nimport { roles } from \"app/services/role\";\r\nimport history from \"@history.js\";\r\n\r\nconst SigninSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .email(\"Invalid email\")\r\n    .required(\"email is required\"),\r\n  password: yup\r\n    .string()\r\n    .min(8, \"Password must be 8 character long\")\r\n    .required(\"password is required\")\r\n});\r\n\r\nclass Signin extends Component {\r\n  // state = {\r\n  //   email: \"watson@example.com\",\r\n  //   password: \"12345678\"\r\n  // };\r\n\r\n  // handleChange = event => {\r\n  //   event.persist();\r\n  //   this.setState({ [event.target.name]: event.target.value });\r\n  // };\r\n\r\n  // handleSubmit = (value, { isSubmitting }) => {\r\n  //   this.props.loginWithEmailAndPassword(value);\r\n  // };\r\n\r\n  state = {\r\n    username: \"\",\r\n    password: \"\",\r\n    type: \"dashboard\",\r\n    // role: \"Fund\", // Static for dashboard.\r\n    showLoadingSpinner: false,\r\n  };\r\n  componentDidMount() {\r\n    document.title = \"تسجيل الدخول\";\r\n  }\r\n  handleSubmit = async (values, { setSubmitting }) => {\r\n    try {\r\n      this.setState({ ...values, showLoadingSpinner: true });\r\n      jwtAuthService.loginWithEmailAndPassword(values.username, values.password, values.type);\r\n      // var response = await userService.login({ username: values.username, password: values.password, type: values.type });\r\n      // if (response.status === 200) {\r\n      //   jwtAuthService.loginWithEmailAndPassword(values.username, values.password, values.type);\r\n      // }\r\n    } catch (ex) {\r\n      this.setState({ showLoadingSpinner: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"auth-layout-wrap\"\r\n        dir=\"rtl\"\r\n        style={{\r\n          backgroundImage: \"linear-gradient(0deg, rgb(195 148 243), rgb(245 245 245 / 30%)), url(/assets/images/photo-wide-4.jpg)\"\r\n        }}\r\n      >\r\n        <div className=\"auth-content\">\r\n          <div className=\"card o-hidden\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <div className=\"p-4\">\r\n                  <div className=\"auth-logo text-center mb-4\">\r\n                    <img src=\"/assets/images/logo.png\" alt=\"\" />\r\n                  </div>\r\n                  <h1 className=\"mb-3 text-18\">تسجيل الدخول</h1>\r\n                  <Formik\r\n                    initialValues={this.state}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={this.handleSubmit}\r\n                    validateOnChange={false}\r\n                    enableReinitialize\r\n                  >\r\n                    {(fromikProps) => {\r\n                      return (\r\n                        <Form className=\"needs-validation\">\r\n                          <div className=\"card-body\">\r\n                            <div className=\"form-row\">\r\n                              <FormikControl control=\"input\" label=\"البريد الإلكتروني\" name=\"username\" placeholder=\"البريد الإلكتروني\" />\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                              <FormikControl control=\"input\" type=\"password\" label=\"كلمة المرور\" name=\"password\" placeholder=\"أدخل كلمة المرور\" />\r\n                            </div>\r\n                            <button className=\"btn btn-primary btn-block btn-rounded mt-3\" type=\"submit\">\r\n                              {this.state.showLoadingSpinner && (\r\n                                <React.Fragment>\r\n                                  <span> جاري التحقق....</span>\r\n                                  <span className=\"spinner-glow spinner-glow-light ml-2\" style={{ verticalAlign: \"middle\" }}></span>\r\n                                </React.Fragment>\r\n                              )}\r\n                              {!this.state.showLoadingSpinner && \"تسجيل الدخول\"}\r\n                            </button>\r\n                            <div className=\"mt-3 text-center\">\r\n                              {/* <Link to=\"/session/signup\" className=\"text-muted\">\r\n                                <u>ليس لديك حساب؟ إنشاء حساب</u>\r\n                              </Link> */}\r\n                              {/* <div className=\"mt-3 text-center\">\r\n                                <Link to=\"/session/forgot-password\" className=\"text-muted\">\r\n                                  <u>هل نسيت كلمة المرور؟</u>\r\n                                </Link>\r\n                              </div> */}\r\n                            </div>\r\n                          </div>\r\n                        </Form>\r\n                      );\r\n                    }}\r\n                  </Formik>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst validationSchema = yup.object().shape({\r\n  username: yup.string().email(\"البريد الإلكتروني غير صحيح.\").required(\"هذا الحقل مطلوب\"),\r\n  password: yup.string().required(\"هذا الحقل مطلوب\"),\r\n});\r\n\r\n// const mapStateToProps = state => ({\r\n//   loginWithEmailAndPassword: PropTypes.func.isRequired,\r\n//   user: state.user\r\n// });\r\n\r\n// export default connect(mapStateToProps, {\r\n//   loginWithEmailAndPassword\r\n// })(Signin);\r\nexport default Signin;\r\n\r\n"],"sourceRoot":""}